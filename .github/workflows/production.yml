name: Production Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, edited, synchronize, reopened, closed]
 
permissions:
  contents: write
  issues: write

jobs:
  # --------------------------------------------------------------------------------
  # Verifcica se o pull request está vindo da branch stable.
  # --------------------------------------------------------------------------------
  Validate-Pull-Request-to-Main:
    if: (github.event_name == 'pull_request') && 
        (github.base_ref == 'main' || github.ref_name == 'main')
    runs-on: ubuntu-latest
    steps:
      - name: Validate pull request origin
        run: |
          echo "Head branch (origin):  ${{ github.head_ref }}"
          echo "Base branch (target): ${{ github.base_ref }}"
          if [ "${{ github.head_ref }}" != "stable" ]; then
            echo "❌ Only pull request from 'stable' branch to 'main' is allowed."
            exit 1
          fi
          echo "✅ Valid pull request: stable → main"
  
  # --------------------------------------------------------------------------------
  # Faz o Checkout dos fontes, gera o os executáveis, gera o instalador e faz deploy
  # para o ambiente de produção.
  # --------------------------------------------------------------------------------
  Build-Deploy-to-Production:
    if: github.event_name == 'push' && github.ref_name == 'main'
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Project
        shell: powershell
        run: .\build.bat
      
      - name: Sign Project Artifacts
        shell: powershell
        run: |
          $SignerExe = ".\signer.exe"
          if (-Not (Test-Path $SignerExe)) {
              Write-Error "signer.exe not found at $SignerExe"
              exit 1
          }
          # Assina todos os arquivos de acordo com o signer.ini configurado
          & $SignerExe -directories=build\Win32\VCL

      - name: Build Production Installer
        id: get_installer
        shell: powershell
        run: |
          # --- Build do instalador ---
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /Qp "src\foundation\InnoSetup\duimp.iss"
          # --- Identificar o instalador gerado ---
          $file = Get-ChildItem -Path "installers\duimp-*.exe" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $file) {
              Write-Error "❌ Não foi possível localizar o instalador gerado."
              exit 1
          }
          $installerName = [System.IO.Path]::GetFileNameWithoutExtension($file.Name)
          $installerPath = $file.FullName
          Write-Host "Installer Name: $installerName"
          Write-Host "Installer Path: $installerPath"
          echo "installer_name=$installerName" >> $env:GITHUB_OUTPUT
          echo "installer_path=$installerPath" >> $env:GITHUB_OUTPUT
      
      - name: Sign Installer
        shell: powershell
        run: |
          $SignerExe = ".\signer.exe"
          if (-Not (Test-Path $SignerExe)) {
              Write-Error "signer.exe not found at $SignerExe"
              exit 1
          }
          # Assina todos os arquivos de acordo com o signer.ini configurado
          & $SignerExe -directories=installers

      - name: Generate Production Tag
        id: tag
        shell: powershell
        run: |
          # extrai a versão do instalador
          $installerName = "${{ steps.get_installer.outputs.installer_name }}"
          if ($installerName -notmatch 'duimp-(\d+\.\d+\.\d+)\.(\d+)') {
              Write-Error "Não foi possível extrair a versão do instalador"
              exit 1
          }
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$installerName" -m "Production Release $installerName"
          git push origin "$installerName"
          echo "release_tag=$installerName" >> $env:GITHUB_OUTPUT

      - name: Deploy to Production
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: "Release Production - ${{ steps.get_installer.outputs.installer_name }}"
          draft: false
          prerelease: false
          files: ${{ steps.get_installer.outputs.installer_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save Version Information
        shell: powershell
        run: |
          $installerName = "${{ steps.get_installer.outputs.installer_name }}"
          if ($installerName -notmatch 'duimp-(\d+\.\d+\.\d+)\.(\d+)') {
              Write-Error "Não foi possível extrair a versão do instalador"
              exit 1
          }
          $version = "$($matches[1]).$($matches[2])"
          Write-Host "Saving version $version to version.txt"
          Set-Content "C:\actions-runner\_work\duimp\version.txt" $version
      
      - name: Download Manifest from FTP
        shell: powershell
        run: |
          $ftpUrl = "ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}/duimp/updates/manifest.json"
          $localManifest = "installers\manifest.json"
          $wc = New-Object System.Net.WebClient
          $wc.Credentials = New-Object System.Net.NetworkCredential("${{ secrets.FTP_USER }}","${{ secrets.FTP_PASS }}")
          $wc.DownloadFile($ftpUrl, $localManifest)
      
      - name: Update local Manifest to new version
        shell: powershell
        run: |
          $manifestPath = "installers\manifest.json"
          $installerName = "${{ steps.get_installer.outputs.installer_name }}"
          if ($installerName -match 'duimp-(\d+\.\d+\.\d+\.\d+)') {
            $version = $matches[1]
          } else {
            Write-Error "❌ Não foi possível extrair a versão de $installerName"
            exit 1
          }
          $json = Get-Content $manifestPath | ConvertFrom-Json
          $json.latestVersion = $version
          $json | ConvertTo-Json -Depth 2 | Set-Content -Path $manifestPath -Encoding UTF8
          Write-Host "✅ Updated manifest.json:"
          Get-Content $manifestPath
      
      - name: Upload Installer to FTP (versions)
        shell: powershell
        run: |
          $ftpUrl = "ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}/duimp/updates/versions/${{ steps.get_installer.outputs.installer_name }}.exe"
          $filePath = "${{ steps.get_installer.outputs.installer_path }}"
          $wc = New-Object System.Net.WebClient
          $wc.Credentials = New-Object System.Net.NetworkCredential("${{ secrets.FTP_USER }}","${{ secrets.FTP_PASS }}")
          Write-Host "Uploading $filePath to $ftpUrl"
          $wc.UploadFile($ftpUrl, "STOR", $filePath)
      
      - name: Upload Manifest to FTP
        shell: powershell
        run: |
          $ftpUrl = "ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}/duimp/updates/manifest.json"
          $wc = New-Object System.Net.WebClient
          $wc.Credentials = New-Object System.Net.NetworkCredential("${{ secrets.FTP_USER }}","${{ secrets.FTP_PASS }}")
          $wc.UploadFile($ftpUrl, "installers\manifest.json")

      - name: Notify Release in Issue
        shell: powershell
        run: |
          $headers = @{
            "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
            "Accept"        = "application/vnd.github+json"
            "Content-Type"  = "application/json"
          }
          # --- Buscar ou criar a issue ---
          $url = "https://api.github.com/repos/${{ github.repository }}/issues?state=open&labels=release-notify"
          $issues = Invoke-RestMethod -Uri $url -Headers $headers -Method Get
          $issue_number = if ($issues.Count -gt 0) { $issues[0].number } else { $null }
          if (-not $issue_number) {
            Write-Host "Nenhuma issue encontrada, criando..."
            $jsonBody = @{
              title  = "Release Notifications"
              labels = @("release-notify")
              body   = "This issue centralizes all release and pre-release notifications."
            } | ConvertTo-Json -Depth 3 -Compress
            $url = "https://api.github.com/repos/${{ github.repository }}/issues"
            $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Post -Body ([System.Text.Encoding]::UTF8.GetBytes($jsonBody))
            $issue_number = $response.number
          }
          # --- Montar comentário ---
          $releaseTag = "${{ steps.tag.outputs.release_tag }}"
          $releaseUrl = "https://github.com/${{ github.repository }}/releases/tag/$releaseTag"
          $kind = "Release"
          $comment_body = "$kind published: [$releaseTag]($releaseUrl) `n`n@elismarpartelli"
          Write-Host "Criando novo comentario..."
          $jsonBody = @{ body = $comment_body } | ConvertTo-Json -Depth 3 -Compress
          $url = "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/comments"
          Invoke-RestMethod -Uri $url -Headers $headers -Method Post -Body ([System.Text.Encoding]::UTF8.GetBytes($jsonBody))
