name: Build and Publish to Production

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  Build-Deploy-to-Production:
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Project
        shell: powershell
        run: .\build-main.bat
      
      - name: Build Installer
        shell: powershell
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "src\foundation\InnoSetup\duimp.iss"

      - name: Identifying the Installer in the Directory
        id: get_installer
        shell: powershell
        run: |
          $file = Get-ChildItem -Path "installers\duimp-*.exe" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          echo "installer_name=$($file.Name)" >> $env:GITHUB_OUTPUT
          echo "installer_path=$($file.FullName)" >> $env:GITHUB_OUTPUT
          $tag = [System.IO.Path]::GetFileNameWithoutExtension($file.Name)
          echo "installer_tag=$tag" >> $env:GITHUB_OUTPUT

      - name: Create or Update Release via REST API
        shell: powershell
        run: |
          $REPO = "${env:GITHUB_REPOSITORY}"
          $TAG = "${{ steps.get_installer.outputs.installer_tag }}"
          $url = "https://api.github.com/repos/$REPO/releases/tags/$TAG"
          try {
            $release = Invoke-RestMethod -Uri $url -Headers @{ Authorization = "token $env:GITHUB_TOKEN"; Accept = "application/vnd.github+json" }
          } catch {
            $release = $null
          }
          if ($release) {
            Write-Host "Release para tag $TAG já existe. Atualizando..."
            $patchUrl = "https://api.github.com/repos/$REPO/releases/$($release.id)"
            $body = @{
              name       = "Release Production - $TAG"
              body       = "Atualização do instalador"
              draft      = $false
              prerelease = $false
            } | ConvertTo-Json -Depth 3
            Invoke-RestMethod -Uri $patchUrl -Method Patch -Headers @{ Authorization = "token $env:GITHUB_TOKEN"; Accept = "application/vnd.github+json" } -Body $body
          } else {
            Write-Host "Criando release e tag $TAG..."
            $body = @{
              tag_name   = $TAG
              name       = "Release Production - $TAG"
              body       = "Primeira versão do instalador"
              draft      = $false
              prerelease = $false
            } | ConvertTo-Json -Depth 3
            Invoke-RestMethod -Uri "https://api.github.com/repos/$REPO/releases" -Method Post -Headers @{ Authorization = "token $env:GITHUB_TOKEN"; Accept = "application/vnd.github+json" } -Body $body
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Download e upload do FTP continuam iguais
      - name: Download Manifest from FTP
        shell: powershell
        run: |
          $ftpUrl = "ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}/duimp/updates/manifest.json"
          $localManifest = "installers\manifest.json"
          $wc = New-Object System.Net.WebClient
          $wc.Credentials = New-Object System.Net.NetworkCredential("${{ secrets.FTP_USER }}","${{ secrets.FTP_PASS }}")
          $wc.DownloadFile($ftpUrl, $localManifest)

      - name: Update local Manifest to new version
        shell: powershell
        run: |
          $manifestPath = "installers\manifest.json"
          $installerName = "${{ steps.get_installer.outputs.installer_name }}"
          if ($installerName -match 'duimp-(\d+\.\d+\.\d+\.\d+)\.exe') {
            $version = $matches[1]
          } else {
            Write-Error "❌ Não foi possível extrair a versão de $installerName"
            exit 1
          }
          $json = Get-Content $manifestPath | ConvertFrom-Json
          $json.latestVersion = $version
          $json | ConvertTo-Json -Depth 2 | Set-Content -Path $manifestPath -Encoding UTF8
          Write-Host "✅ Updated manifest.json:"
          Get-Content $manifestPath

      - name: Upload Installer to FTP (versions)
        shell: powershell
        run: |
          $ftpUrl = "ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}/duimp/updates/versions/${{ steps.get_installer.outputs.installer_name }}"
          $filePath = "${{ steps.get_installer.outputs.installer_path }}"
          $wc = New-Object System.Net.WebClient
          $wc.Credentials = New-Object System.Net.NetworkCredential("${{ secrets.FTP_USER }}","${{ secrets.FTP_PASS }}")
          Write-Host "Uploading $filePath to $ftpUrl"
          $wc.UploadFile($ftpUrl, "STOR", $filePath)

      - name: Upload Manifest to FTP
        shell: powershell
        run: |
          $ftpUrl = "ftp://${{ secrets.FTP_HOST }}:${{ secrets.FTP_PORT }}/duimp/updates/manifest.json"
          $wc = New-Object System.Net.WebClient
          $wc.Credentials = New-Object System.Net.NetworkCredential("${{ secrets.FTP_USER }}","${{ secrets.FTP_PASS }}")
          $wc.UploadFile($ftpUrl, "installers\manifest.json")