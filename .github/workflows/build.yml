name: Build

on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, closed]

jobs:
  # ---------------------------------------------------------
  # 1) Validação de PR (somente quando destino é main)
  # ---------------------------------------------------------
  validate-main-pr:
    name: "🚨 Validação de PR develop → main"
    runs-on: self-hosted
    if: ${{ github.event.pull_request.base.ref == 'main' && github.event.action != 'closed' }}
    steps:
      - name: Checando origem do PR
        run: |
          echo "Base branch: ${{ github.event.pull_request.base.ref }}"
          echo "Head branch: ${{ github.event.pull_request.head.ref }}"
          if [ "${GITHUB_HEAD_REF}" != "develop" ]; then
            echo "::error ::PR inválido! Somente 'develop' → 'main' é permitido."
            exit 1
          fi

  # ---------------------------------------------------------
  # 2) Build de Homologação (merge concluído em develop)
  # ---------------------------------------------------------
  build-homologation:
    name: "🛠️ Build Homologação"
    runs-on: self-hosted
    if: ${{ github.base_ref == 'develop' && github.event.pull_request.merged == true }}
    steps:
      - uses: actions/checkout@v4
      - name: Publicando build de homologação
        run: echo "🚀 Build Homologação rodando após merge em develop"

  # ---------------------------------------------------------
  # 3) Build de Produção (merge concluído de develop → main)
  # ---------------------------------------------------------
  build-production:
    name: "🚀 Build Produção"
    runs-on: self-hosted
    needs: validate-main-pr
    if: ${{ github.base_ref == 'main' && github.head_ref == 'develop' && github.event.pull_request.merged == true }}
    steps:
      - uses: actions/checkout@v4
      - name: Publicando build de produção
        run: echo "🚀 Build Produção rodando após merge de develop → main"