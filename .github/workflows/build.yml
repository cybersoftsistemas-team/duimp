name: Build and Deploy Workflow

on:
  # Gatilho para todas as atividades relevantes de pull request em main e develop
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, closed]

# Define o shell padr√£o para todos os jobs neste workflow.
defaults:
  run:
    shell: bash

jobs:
  # --------------------------------------------------------------------
  # JOB DE DEBUG: Executa sempre para mostrar o contexto do evento.
  # --------------------------------------------------------------------
  debug-context:
    name: "üîç Debug do Contexto do Evento"
    runs-on: self-hosted
    steps:
      - name: "Imprime o contexto 'github' completo em formato JSON"
        # Este comando agora ser√° executado com bash, evitando erros de PowerShell.
        run: echo "${{ toJSON(github) }}"

  # --------------------------------------------------------------------
  # 1) Valida√ß√£o de PR (enquanto o PR de 'develop' para 'main' est√° aberto)
  # --------------------------------------------------------------------
  validate-main-pr:
    name: "üö® Valida√ß√£o de PR (develop ‚Üí main)"
    runs-on: self-hosted
    # Este job s√≥ executa em PRs ABERTOS que t√™m 'main' como destino.
    if: >
      github.event.action != 'closed' &&
      github.event.pull_request.base.ref == 'main'
    steps:
      - name: "Verifica se a origem do PR √© 'develop'"
        # A sintaxe 'if' abaixo agora funcionar√° corretamente com bash.
        run: |
          echo "--- INICIANDO VALIDA√á√ÉO DO PULL REQUEST ---"
          echo "Base (destino) do PR: ${{ github.event.pull_request.base.ref }}"
          echo "Head (origem) do PR: ${{ github.event.pull_request.head.ref }}"
          if [ "${{ github.event.pull_request.head.ref }}" != "develop" ]; then
            echo "::error ::PR inv√°lido! Pull requests para 'main' devem vir exclusivamente da branch 'develop'."
            exit 1
          else
            echo "‚úÖ Valida√ß√£o de PR BEM-SUCEDIDA."
          fi

  # ---------------------------------------------------------------
  # 2) Build Homologa√ß√£o (executa ap√≥s merge para 'develop')
  # ---------------------------------------------------------------
  build-homologation:
    name: "üõ†Ô∏è Build Homologa√ß√£o"
    runs-on: self-hosted
    # Este job s√≥ executa quando um PR √© MERGADO na branch 'develop'.
    if: >
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'develop'
    steps:
      - name: "Checkout da branch 'develop'"
        uses: actions/checkout@v4
      - name: "Publicando build de homologa√ß√£o"
        run: |
          echo "--- INICIANDO BUILD DE HOMOLOGA√á√ÉO ---"
          echo "Simulando execu√ß√£o do script de build (.bat)..."
          # Futuramente, substitua os echos abaixo pela chamada ao seu script .bat
          echo "Passo 1: Compilando o projeto..."
          echo "Passo 2: Empacotando artefatos..."
          echo "‚úÖ Build de Homologa√ß√£o CONCLU√çDO COM SUCESSO."

  # --------------------------------------------------------------------
  # 3) Build Produ√ß√£o (executa ap√≥s merge de 'develop' para 'main')
  # --------------------------------------------------------------------
  build-production:
    name: "üöÄ Build Produ√ß√£o"
    runs-on: self-hosted
    needs: validate-main-pr # Garante que a valida√ß√£o seja considerada
    # Este job s√≥ executa quando um PR de 'develop' √© MERGADO na branch 'main'.
    if: >
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main' &&
      github.event.pull_request.head.ref == 'develop'
    steps:
      - name: "Checkout da branch 'main'"
        uses: actions/checkout@v4
      - name: "Publicando build de produ√ß√£o"
        run: |
          echo "--- INICIANDO BUILD DE PRODU√á√ÉO ---"
          echo "Simulando execu√ß√£o do script de deploy (.bat)..."
          # Futuramente, substitua os echos abaixo pela chamada ao seu script .bat
          echo "Passo 1: Baixando artefatos..."
          echo "Passo 2: Publicando no ambiente de produ√ß√£o..."
          echo "‚úÖ Build de Produ√ß√£o CONCLU√çDO COM SUCESSO."

