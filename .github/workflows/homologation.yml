name: Homologation Build

on:
  push:
    branches:
      - stable
  pull_request:
    branches:
      - stable
    types: [opened, synchronize, reopened, closed]
 
permissions:
  contents: write

jobs:
  # --------------------------------------------------------------------------------
  # Valida o pull request da branch stable.
  # --------------------------------------------------------------------------------
  Validate-Pull-Request-to-Stable:
    if: (github.event_name == 'pull_request') && 
        (github.base_ref == 'stable' || github.ref_name == 'stable')
    runs-on: ubuntu-latest
    steps:
      - name: Validate pull request origin
        run: |
          echo "Head branch (origin):  ${{ github.head_ref }}"
          echo "Base branch (target): ${{ github.base_ref }}"
          if [ "${{ github.head_ref }}" != "develop" ]; then
            echo "❌ Only pull request from 'develop' branch to 'stable' is allowed."
            exit 1
          fi
          echo "✅ Valid pull request: develop → stable"
  
  # --------------------------------------------------------------------------------
  # Faz o Checkout dos fontes, gera o os executáveis, gera o instalador e faz deploy
  # para o ambiente de homologação.
  # --------------------------------------------------------------------------------
  Build-Deploy-to-Homologation:
    if: github.event_name == 'push' && github.ref_name == 'stable'
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Project
        shell: powershell
        run: .\build-stable.bat
      
      - name: Sign Project Artifacts
        shell: powershell
        run: |
          $SignerExe = ".\signer.exe"
          if (-Not (Test-Path $SignerExe)) {
              Write-Error "signer.exe not found at $SignerExe"
              exit 1
          }
          # Assina todos os arquivos de acordo com o signer.ini configurado
          & $SignerExe -directories=build\Win32\VCL

      - name: Build Homologation Installer
        shell: powershell
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "src\foundation\InnoSetup\duimp.iss"

      - name: Identify Installer
        id: get_installer
        shell: powershell
        run: |
          $file = Get-ChildItem -Path "installers\duimp-*.exe" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          echo "installer_name=$([System.IO.Path]::GetFileNameWithoutExtension($file.Name))" >> $env:GITHUB_OUTPUT
          echo "installer_path=$($file.FullName)" >> $env:GITHUB_OUTPUT
      
      - name: Sign Installer
        shell: powershell
        run: |
          $SignerExe = ".\signer.exe"
          if (-Not (Test-Path $SignerExe)) {
              Write-Error "signer.exe not found at $SignerExe"
              exit 1
          }
          # Assina todos os arquivos de acordo com o signer.ini configurado
          & $SignerExe -directories=installers

      - name: Generate Homologation Tag
        id: tag
        shell: powershell
        run: |
          # extrai a versão do instalador
          $installerName = "${{ steps.get_installer.outputs.installer_name }}"
          if ($installerName -notmatch 'duimp-(\d+\.\d+\.\d+)\.(\d+)') {
              Write-Error "Não foi possível extrair a versão do instalador"
              exit 1
          }
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$installerName" -m "Homologation Release $installerName"
          git push origin "$installerName"
          echo "release_tag=$installerName" >> $env:GITHUB_OUTPUT

      - name: Deploy to Homologation
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: "Release Homologation - ${{ steps.get_installer.outputs.installer_name }}"
          draft: false
          prerelease: true
          files: ${{ steps.get_installer.outputs.installer_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}